{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# Plotting Datasets\n\n**Gerd Duscher**\n\n08/25/2020\n\n**Please download this example and run it as a notebook by scrolling to the\nbottom of this page**\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "# Ensure python 3 compatibility:\nfrom __future__ import division, print_function, absolute_import, unicode_literals\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sys\nsys.path.append('../../')\nimport sidpy as sid\n\nprint(sid.__version__)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Plotting an Image\nFirst, we make a sidpy dataset from a numpy array\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "x = np.random.normal(3, 2.5, size=(512, 512))\ndset = sid.Dataset.from_array(x)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Next, we add some information about this dataset\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dset.data_type = 'image'\ndset.units = 'counts'\ndset.quantity = 'intensity'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For plotting it is important to set the dimensions correctly.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dset.set_dimension(0, sid.Dimension('x', np.arange(dset.shape[0])*.02))\ndset.x.dimension_type = 'spatial'\ndset.x.units = 'nm'\ndset.x.quantity = 'distance'\ndset.set_dimension(1, sid.Dimension('y', np.arange(dset.shape[1])*.02))\ndset.y.dimension_type = 'spatial'\ndset.yunits = 'nm'\ndset.y.quantity = 'distance'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Now we plot the dataset:\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dset.plot()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Creating an Image-Stack DataSet\nIn the following we will make a numpy which resembles a stack of images\n\nIn the ``sidpy Dataset`` will set the ``data_type`` to ``image_stack`` for the plotting routine to know how to plot this dataset.\n\nThe dimensions have to contain at least two ``spatial`` dimensions and one that is identifiable as a stack dimension ('stack, 'frame', 'time').\nFirst we make a stack of images\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "x = np.random.normal(3, 2.5, size=(25, 512, 512))\n\ndset = sid.Dataset.from_array(x)\ndset.data_type = 'image_stack'\ndset.units = 'counts'\ndset.quantity = 'intensity'\n\ndset.set_dimension(0, sid.Dimension('frame', np.arange(dset.shape[0])))\ndset.frame.dimension_type = 'time'\ndset.set_dimension(1, sid.Dimension('x', np.arange(dset.shape[1])*.02))\ndset.x.dimension_type = 'spatial'\ndset.x.units = 'nm'\ndset.x.quantity = 'distance'\ndset.set_dimension(2, sid.Dimension('y', np.arange(dset.shape[2])*.02))\ndset.y.dimension_type = 'spatial'\ndset.yunits = 'nm'\ndset.y.quantity = 'distance'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Plotting the Dataset\nPlease note that the scroll wheel will move you through the stack.\n\nZoom to an area and let it play!\n\nClick on the ``Average`` button and then click on it again.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dset.plot()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The kwargs dictionary is used to plot the image stack in TEM style with scale bar\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "kwargs = {'scale_bar': True, 'cmap': 'hot'}  # or maby 'cmap': 'gray'\n \ndset.plot(verbose=True, **kwargs)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Plot Dataset as Spectral Image\nWe need to change the data_type of the dataset to ``spectrum_image`` and the dimension_type of one dimension to ``spectral``.\n\nNow the plot function plots it as a spectrum image.\n\nSelect the spectrum with the mouse (left click).\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dset.data_type = 'spectrum_image'\ndset.set_dimension(0, sid.Dimension('spectrum', np.arange(dset.shape[0])))\ndset.spectrum.dimension_type = 'spectral'\n\ndset.plot()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We make the selection more visible by setting the binning of the spectra selection.\n\nThe binning avrages over the binning box.\n\nRun the code-cell below and look in the plot above.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dset.view.set_bin([20, 20])\n\nplt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The axes (and figure) instances of matplotlib can be accessed throught the ``view`` attribute of  the sidpy dataset.\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "x, y = np.mgrid[0:501:100, 0:501:100] + 5\ndset.view.axes[0].scatter(x, y, color='red');"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "kwargs = {'scale_bar': True, 'cmap': 'hot'}\n    \nview = sid.viz.dataset_viz.ImageStackVisualizer(dset, **kwargs)\nplt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "print(dset.shape)\nkwargs = {'scale_bar': True, 'cmap': 'hot'}\nview = sid.dataset_viz.ImageVisualizer(dset, image_number=5, **kwargs)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dset.data_type = 'spectrum_image'\ndset.set_dimension(0, sid.Dimension('spectrum',np.arange(dset.shape[0])))\ndset.spectrum.dimension_type = 'spectral'\nview = sid.viz.dataset_viz.SpectralImageVisualizer(dset)\nview.set_bin([30, 40])\nplt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "dset.data_type = 'spectrum_image'\ndset.set_dimension(0, sid.Dimension('spectrum',np.arange(dset.shape[0])))\ndset.spectrum.dimension_type = 'spectral'\n# view = SpectralImageVisualizer(dset)\n# dset.plot()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
